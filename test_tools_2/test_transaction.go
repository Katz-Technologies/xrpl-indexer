package main

import (
	"encoding/json"
	"fmt"
	"os"
	"sort"
	"strings"

	"github.com/shopspring/decimal"
)

// =========================
// Domain types (balances)
// =========================

type ChangeKind string

const (
	KindFee       ChangeKind = "Fee"
	KindSwap      ChangeKind = "Swap"
	KindDexOffer  ChangeKind = "DexOffer"
	KindTransfer  ChangeKind = "Transfer"
	KindBurn      ChangeKind = "Burn"
	KindLiquidity ChangeKind = "Liquidity"
	KindPayout    ChangeKind = "Payout"
	KindUnknown   ChangeKind = "Unknown"
)

type BalanceChange struct {
	Account  string
	Currency string
	Issuer   string
	Delta    decimal.Decimal
	Kind     ChangeKind
}

var (
	eps           = decimal.NewFromFloat(1e-9)
	dustThreshold = decimal.NewFromFloat(1e-12) // –≤—Å—ë –º–µ–Ω—å—à–µ ‚Äî —Å—á–∏—Ç–∞–µ–º –Ω—É–ª—ë–º
	maxIOUValue   = decimal.NewFromFloat(1e20)  // –≤—Å—ë –±–æ–ª—å—à–µ ‚Äî —Å—á–∏—Ç–∞–µ–º –º—É—Å–æ—Ä–æ–º
)

// normalizeAmount –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç –¥–∏–∞–ø–∞–∑–æ–Ω –∏ —É–±–∏—Ä–∞–µ—Ç "–ø—ã–ª—å" IOU-–∑–Ω–∞—á–µ–Ω–∏–π
func normalizeAmount(val decimal.Decimal) decimal.Decimal {
	abs := val.Abs()

	if abs.LessThan(dustThreshold) {
		return decimal.Zero
	}

	if abs.GreaterThan(maxIOUValue) {
		return decimal.Zero
	}

	return val
}

// ExtractBalanceChanges —Å–æ–±–∏—Ä–∞–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–æ–≤ (XRP + IOU)
// –∏ –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç –∏—Ö –ø–æ —Ç–∏–ø—É –¥–µ–π—Å—Ç–≤–∏—è (Fee / Swap / DexOffer / Transfer)
func ExtractBalanceChanges(base map[string]interface{}) []BalanceChange {
	var result []BalanceChange

	meta, ok := base["meta"].(map[string]interface{})
	if !ok {
		return result
	}

	nodes, ok := meta["AffectedNodes"].([]interface{})
	if !ok {
		return result
	}

	txAccount, _ := base["Account"].(string)
	txDestination, _ := base["Destination"].(string)

	// –ü–∞—Ä—Å–∏–º Fee, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤
	txFee := decimal.Zero
	switch v := base["Fee"].(type) {
	case string:
		txFee, _ = decimal.NewFromString(v)
	case float64:
		txFee = decimal.NewFromFloat(v)
	case int64:
		txFee = decimal.NewFromInt(v)
	case int:
		txFee = decimal.NewFromInt(int64(v))
	case json.Number:
		if f, err := v.Float64(); err == nil {
			txFee = decimal.NewFromFloat(f)
		}
	}

	// üîπ 1) –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã —Å AMMID (–∏—Å–∫–ª—é—á–∞–µ–º –∏—Ö –∏–∑ –±–∞–ª–∞–Ω—Å–æ–≤)
	ammAccounts := map[string]bool{}
	for _, raw := range nodes {
		nodeMap, ok := raw.(map[string]interface{})
		if !ok {
			continue
		}
		for _, nodeType := range []string{"ModifiedNode", "DeletedNode", "CreatedNode"} {
			node, ok := nodeMap[nodeType].(map[string]interface{})
			if !ok {
				continue
			}
			if ledgerType, _ := node["LedgerEntryType"].(string); ledgerType != "AccountRoot" {
				continue
			}
			final, _ := node["FinalFields"].(map[string]interface{})
			if final == nil {
				final, _ = node["NewFields"].(map[string]interface{})
			}
			if final == nil {
				continue
			}
			if _, ok := final["AMMID"]; ok {
				if acc, _ := final["Account"].(string); acc != "" {
					ammAccounts[acc] = true
				}
			}
		}
	}

	// üîπ 2) –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ Offer (DEX)
	hasOffer := false
	for _, raw := range nodes {
		nodeMap, ok := raw.(map[string]interface{})
		if !ok {
			continue
		}
		for _, nodeType := range []string{"ModifiedNode", "DeletedNode", "CreatedNode"} {
			node, ok := nodeMap[nodeType].(map[string]interface{})
			if !ok {
				continue
			}
			if ledgerType, _ := node["LedgerEntryType"].(string); ledgerType == "Offer" {
				hasOffer = true
				break
			}
		}
	}

	// üîπ 3) –ü—Ä–æ–≤–µ—Ä—è–µ–º self-swap
	isSelfSwap := txAccount != "" && txAccount == txDestination && !hasOffer

	// üîπ 4) –°–æ–±–∏—Ä–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
	for _, raw := range nodes {
		nodeMap, ok := raw.(map[string]interface{})
		if !ok {
			continue
		}

		// –û–±—Ä–∞–±–æ—Ç–∫–∞ ModifiedNode –∏ DeletedNode
		for _, nodeType := range []string{"ModifiedNode", "DeletedNode"} {
			node, ok := nodeMap[nodeType].(map[string]interface{})
			if !ok {
				continue
			}

			ledgerType, _ := node["LedgerEntryType"].(string)
			final, _ := node["FinalFields"].(map[string]interface{})
			prev, _ := node["PreviousFields"].(map[string]interface{})
			if final == nil || prev == nil {
				continue
			}

			switch ledgerType {

			case "AccountRoot":
				account, _ := final["Account"].(string)
				balFinalStr, _ := final["Balance"].(string)
				balPrevStr, _ := prev["Balance"].(string)

				if account == "" || balFinalStr == "" || balPrevStr == "" {
					continue
				}
				if ammAccounts[account] || (isSelfSwap && account != txAccount) {
					continue
				}

				balFinal, _ := decimal.NewFromString(balFinalStr)
				balPrev, _ := decimal.NewFromString(balPrevStr)
				delta := normalizeAmount(balFinal.Sub(balPrev).Div(decimal.NewFromInt(1_000_000)))

				if delta.IsZero() {
					continue
				}

				kind := KindUnknown

				// –û–ø—Ä–µ–¥–µ–ª—è–µ–º Fee –ø–æ —Ç–æ—á–Ω–æ–º—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é —Å —Å—É–º–º–æ–π –∫–æ–º–∏—Å—Å–∏–∏
				if account == txAccount && delta.IsNegative() && delta.Abs().Equal(txFee.Div(decimal.NewFromInt(1_000_000)).Abs()) {
					kind = KindFee
				}

				result = append(result, BalanceChange{
					Account:  account,
					Currency: "XRP",
					Issuer:   "XRP",
					Delta:    delta,
					Kind:     kind,
				})

			case "RippleState":
				balFinal, ok1 := extractDecimal(final, "Balance", "value")
				balPrev, ok2 := extractDecimal(prev, "Balance", "value")
				if !ok1 || !ok2 {
					continue
				}
				delta := normalizeAmount(balFinal.Sub(balPrev))
				if delta.IsZero() {
					continue
				}

				highLimit, _ := final["HighLimit"].(map[string]interface{})
				lowLimit, _ := final["LowLimit"].(map[string]interface{})
				highIssuer, _ := highLimit["issuer"].(string)
				lowIssuer, _ := lowLimit["issuer"].(string)
				currency, _ := highLimit["currency"].(string)
				tokenIssuer := detectTokenIssuer(base, currency)

				// –û–ø—Ä–µ–¥–µ–ª—è–µ–º burn –æ–ø–µ—Ä–∞—Ü–∏—é: –µ—Å–ª–∏ —Ç–æ–∫–µ–Ω—ã –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è —ç–º–∏—Ç–µ–Ω—Ç—É
				isBurn := false
				if txDestination != "" && txDestination == tokenIssuer && delta.IsPositive() {
					isBurn = true
				}
				
				// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—ã–¥–∞—á—É: –µ—Å–ª–∏ —ç–º–∏—Ç–µ–Ω—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–æ–∫–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
				isPayout := false
				if txAccount == tokenIssuer && delta.IsPositive() && txDestination != tokenIssuer {
					isPayout = true
				}

				// —Å—Ç–æ—Ä–æ–Ω–∞ High (–±–∞–ª–∞–Ω—Å –≤–µ–¥—ë—Ç—Å—è –æ—Ç –ª–∏—Ü–∞ HighIssuer)
				if highIssuer != "" && highIssuer != tokenIssuer && !ammAccounts[highIssuer] && !(isSelfSwap && highIssuer != txAccount) {
					kind := KindUnknown
					if isBurn && highIssuer == txAccount {
						kind = KindBurn
					}
					result = append(result, BalanceChange{
						Account:  highIssuer,
						Currency: currency,
						Issuer:   lowIssuer,
						Delta:    delta.Neg(),
						Kind:     kind,
					})
				}
				// —Å—Ç–æ—Ä–æ–Ω–∞ Low
				if lowIssuer != "" && lowIssuer != tokenIssuer && !ammAccounts[lowIssuer] && !(isSelfSwap && lowIssuer != txAccount) {
					kind := KindUnknown
					if isBurn && lowIssuer == txAccount {
						kind = KindBurn
					}
					if isPayout && lowIssuer == txDestination {
						kind = KindPayout
					}
					result = append(result, BalanceChange{
						Account:  lowIssuer,
						Currency: currency,
						Issuer:   highIssuer,
						Delta:    delta,
						Kind:     kind,
					})
				}
			}
		}

		// –û–±—Ä–∞–±–æ—Ç–∫–∞ CreatedNode (—Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –∏–ª–∏ trustlines)
		if node, ok := nodeMap["CreatedNode"].(map[string]interface{}); ok {
			ledgerType, _ := node["LedgerEntryType"].(string)
			newFields, _ := node["NewFields"].(map[string]interface{})
			if newFields == nil {
				continue
			}

			switch ledgerType {

			case "AccountRoot":
				account, _ := newFields["Account"].(string)
				balNewStr, _ := newFields["Balance"].(string)

				if account == "" || balNewStr == "" {
					continue
				}
				if ammAccounts[account] || (isSelfSwap && account != txAccount) {
					continue
				}

				balNew, _ := decimal.NewFromString(balNewStr)
				delta := normalizeAmount(balNew.Div(decimal.NewFromInt(1_000_000)))

				if delta.IsZero() {
					continue
				}

				// –ù–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç –ø–æ–ª—É—á–∞–µ—Ç –±–∞–ª–∞–Ω—Å (–≤—Å–µ–≥–¥–∞ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π)
				result = append(result, BalanceChange{
					Account:  account,
					Currency: "XRP",
					Issuer:   "XRP",
					Delta:    delta,
					Kind:     KindUnknown,
				})

			case "RippleState":
				// –°–æ–∑–¥–∞–Ω–∏–µ trustline —Å –Ω–∞—á–∞–ª—å–Ω—ã–º –±–∞–ª–∞–Ω—Å–æ–º
				balNew, ok1 := extractDecimal(newFields, "Balance", "value")
				if !ok1 || balNew.IsZero() {
					continue
				}

				highLimit, _ := newFields["HighLimit"].(map[string]interface{})
				lowLimit, _ := newFields["LowLimit"].(map[string]interface{})
				highIssuer, _ := highLimit["issuer"].(string)
				lowIssuer, _ := lowLimit["issuer"].(string)
				currency, _ := highLimit["currency"].(string)
				tokenIssuer := detectTokenIssuer(base, currency)

				// —Å—Ç–æ—Ä–æ–Ω–∞ High
				if highIssuer != "" && highIssuer != tokenIssuer && !ammAccounts[highIssuer] && !(isSelfSwap && highIssuer != txAccount) {
					result = append(result, BalanceChange{
						Account:  highIssuer,
						Currency: currency,
						Issuer:   lowIssuer,
						Delta:    balNew.Neg(),
						Kind:     KindUnknown,
					})
				}
				// —Å—Ç–æ—Ä–æ–Ω–∞ Low
				if lowIssuer != "" && lowIssuer != tokenIssuer && !ammAccounts[lowIssuer] && !(isSelfSwap && lowIssuer != txAccount) {
					result = append(result, BalanceChange{
						Account:  lowIssuer,
						Currency: currency,
						Issuer:   highIssuer,
						Delta:    balNew,
						Kind:     KindUnknown,
					})
				}
			}
		}
	}

	return result
}

// detectTokenIssuer –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —ç–º–∏—Ç–µ–Ω—Ç–∞ —Ç–æ–∫–µ–Ω–∞ –∏–∑ –ø–æ–ª–µ–π Amount / SendMax / DeliveredAmount
func detectTokenIssuer(tx map[string]interface{}, currency string) string {
	check := func(v interface{}) string {
		if m, ok := v.(map[string]interface{}); ok {
			if c, _ := m["currency"].(string); c == currency {
				if iss, _ := m["issuer"].(string); iss != "" {
					return iss
				}
			}
		}
		return ""
	}
	if iss := check(tx["Amount"]); iss != "" {
		return iss
	}
	if iss := check(tx["SendMax"]); iss != "" {
		return iss
	}
	if meta, ok := tx["meta"].(map[string]interface{}); ok {
		if iss := check(meta["DeliveredAmount"]); iss != "" {
			return iss
		}
		if iss := check(meta["delivered_amount"]); iss != "" {
			return iss
		}
	}
	return ""
}

func extractDecimal(m map[string]interface{}, key string, innerKey string) (decimal.Decimal, bool) {
	v, ok := m[key].(map[string]interface{})
	if !ok {
		return decimal.Zero, false
	}
	valStr, _ := v[innerKey].(string)
	if valStr == "" {
		return decimal.Zero, false
	}
	val, err := decimal.NewFromString(valStr)
	if err != nil {
		return decimal.Zero, false
	}
	return normalizeAmount(val), true
}

// =========================
// Grouping into Actions
// =========================

type ActionKind string

const (
	ActTransfer  ActionKind = "Transfer"
	ActSwap      ActionKind = "Swap"      // –æ–¥–Ω–æ –ª–∏—Ü–æ: -X +Y
	ActDexOffer  ActionKind = "DexOffer"  // –æ–¥–Ω–æ –ª–∏—Ü–æ: -A +B (–Ω–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å/–ø–æ–ª—É—á–∞—Ç–µ–ª—å)
	ActFee       ActionKind = "Fee"       // -XRP –∫–æ–º–∏—Å—Å–∏—è
	ActBurn      ActionKind = "Burn"      // —Å–∂–∏–≥–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤ (–æ—Ç–ø—Ä–∞–≤–∫–∞ —ç–º–∏—Ç–µ–Ω—Ç—É)
	ActLiquidity ActionKind = "Liquidity" // –≤—ã–≤–æ–¥ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏ (–¥–µ–ø–æ–∑–∏—Ç –≤ AMM)
)

type Side struct {
	Account  string
	Currency string
	Issuer   string
	Amount   decimal.Decimal // + –ø–æ–ª—É—á–µ–Ω–æ, - –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
}

type Action struct {
	Kind  ActionKind
	Sides []Side // 1..2 —Å—Ç–æ—Ä–æ–Ω—ã (fee=1, swap/dexOffer=2, transfer=2)
	Note  string // –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏/–≤—ã–≤–æ–¥–∞
}

func sign(x decimal.Decimal) int {
	switch {
	case x.GreaterThan(eps):
		return +1
	case x.LessThan(eps.Neg()):
		return -1
	default:
		return 0
	}
}

// getDeliveredInfo: –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–∞—è –≤–∞–ª—é—Ç–∞/—ç–º–∏—Ç–µ–Ω—Ç/–∑–Ω–∞—á–µ–Ω–∏–µ (—É—á–∏—Ç—ã–≤–∞–µ—Ç XRP –∫–∞–∫ —Å—Ç—Ä–æ–∫—É –≤ –¥—Ä–æ–ø–∞—Ö)
func getDeliveredInfo(tx map[string]interface{}) (currency, issuer string, value decimal.Decimal, isIOU bool, ok bool) {
	tryObj := func(v interface{}) (string, string, decimal.Decimal, bool) {
		m, _ := v.(map[string]interface{})
		if m == nil {
			return "", "", decimal.Zero, false
		}
		cur, _ := m["currency"].(string)
		iss, _ := m["issuer"].(string)
		valStr, _ := m["value"].(string)
		if cur == "" || valStr == "" {
			return "", "", decimal.Zero, false
		}
		val, err := decimal.NewFromString(valStr)
		if err != nil {
			return "", "", decimal.Zero, false
		}
		return cur, iss, val, true
	}

	// meta.delivered_amount / DeliveredAmount
	if meta, okm := tx["meta"].(map[string]interface{}); okm {
		if cur, iss, v, okk := tryObj(meta["delivered_amount"]); okk {
			return cur, iss, v, true, true
		}
		if cur, iss, v, okk := tryObj(meta["DeliveredAmount"]); okk {
			return cur, iss, v, true, true
		}
		// XRP case: –º–æ–∂–µ—Ç –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π-–¥—Ä–æ–ø–∞–º–∏
		if s, oks := meta["delivered_amount"].(string); oks && s != "" {
			if drops, err := decimal.NewFromString(s); err == nil {
				return "XRP", "XRP", drops.Div(decimal.NewFromInt(1_000_000)), false, true
			}
		}
		if s, oks := meta["DeliveredAmount"].(string); oks && s != "" {
			if drops, err := decimal.NewFromString(s); err == nil {
				return "XRP", "XRP", drops.Div(decimal.NewFromInt(1_000_000)), false, true
			}
		}
	}

	// fallback –∫ Amount (–µ—Å–ª–∏ –Ω–µ—Ç delivered_amount)
	switch a := tx["Amount"].(type) {
	case string: // XRP drops
		if a != "" {
			if drops, err := decimal.NewFromString(a); err == nil {
				return "XRP", "XRP", drops.Div(decimal.NewFromInt(1_000_000)), false, true
			}
		}
	case map[string]interface{}:
		if cur, iss, v, okk := tryObj(a); okk {
			return cur, iss, v, true, true
		}
	}

	return "", "", decimal.Zero, false, false
}

// —Å–æ–±–∏—Ä–∞–µ—Ç change –∏–Ω–¥–µ–∫—Å—ã –ø–æ –∞–∫–∫–∞—É–Ω—Ç—É, –∏—Å–∫–ª—é—á–∞—è —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ
func collectByAccount(changes []BalanceChange, used []bool) map[string][]int {
	m := make(map[string][]int)
	for i := range changes {
		if used[i] {
			continue
		}
		m[changes[i].Account] = append(m[changes[i].Account], i)
	}
	return m
}

// –ø–æ–¥–±–∏—Ä–∞–µ—Ç —É –∞–∫–∫–∞—É–Ω—Ç–∞ –ø–∞—Ä—ã (+/-) –∫–∞–∫ –æ–¥–Ω–æ –¥–µ–π—Å—Ç–≤–∏–µ.
// –µ—Å–ª–∏ thisKind=ActSwap ‚Äî –ø–æ–º–µ—á–∞–µ–º Kind —É –ø–∞—Ä–Ω—ã—Ö –Ω–∞ Swap, –µ—Å–ª–∏ ActDexOffer ‚Äî DexOffer.
func pairAccountActions(
	account string,
	changes []BalanceChange,
	used []bool,
	actionKind ActionKind,
) (acts []Action) {

	var idxs []int
	for i := range changes {
		if used[i] {
			continue
		}
		if changes[i].Account == account {
			idxs = append(idxs, i)
		}
	}
	if len(idxs) == 0 {
		return
	}

	var pos, neg []int
	for _, i := range idxs {
		if sign(changes[i].Delta) > 0 {
			pos = append(pos, i)
		} else if sign(changes[i].Delta) < 0 {
			neg = append(neg, i)
		}
	}

	// –ñ–∞–¥–Ω–æ –ø–∞—Ä–∏–º —Å–∞–º—ã–π –±–æ–ª—å—à–æ–π –ø–æ –º–æ–¥—É–ª—é —Å —Å–∞–º—ã–º –±–æ–ª—å—à–∏–º –ø–æ –º–æ–¥—É–ª—é
	sort.Slice(pos, func(i, j int) bool {
		return changes[pos[i]].Delta.GreaterThan(changes[pos[j]].Delta)
	})
	sort.Slice(neg, func(i, j int) bool {
		return changes[neg[i]].Delta.Neg().GreaterThan(changes[neg[j]].Delta.Neg())
	})

	n := len(pos)
	if len(neg) < n {
		n = len(neg)
	}
	for k := 0; k < n; k++ {
		ip := pos[k]
		in := neg[k]
		acts = append(acts, Action{
			Kind: actionKind,
			Sides: []Side{
				{
					Account:  account,
					Currency: changes[in].Currency,
					Issuer:   changes[in].Issuer,
					Amount:   changes[in].Delta, // –º–∏–Ω—É—Å
				},
				{
					Account:  account,
					Currency: changes[ip].Currency,
					Issuer:   changes[ip].Issuer,
					Amount:   changes[ip].Delta, // –ø–ª—é—Å
				},
			},
			Note: fmt.Sprintf("%s pair for %s", actionKind, account),
		})
		used[ip] = true
		used[in] = true
		// –ø—Ä–æ—Å—Ç–∞–≤–∏–º Kind —É –∏–∑–º–µ–Ω–µ–Ω–∏–π
		switch actionKind {
		case ActSwap:
			changes[ip].Kind = KindSwap
			changes[in].Kind = KindSwap
		case ActDexOffer:
			changes[ip].Kind = KindDexOffer
			changes[in].Kind = KindDexOffer
		}
	}

	return
}

// BuildActionGroups ‚Äî —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç —Å–≤—è–∑–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–∑–º–µ–Ω—ë–Ω–Ω—ã—Ö –±–∞–ª–∞–Ω—Å–æ–≤
func BuildActionGroups(tx map[string]interface{}, changes []BalanceChange) []Action {
	var actions []Action
	used := make([]bool, len(changes))

	txAccount, _ := tx["Account"].(string)
	txDestination, _ := tx["Destination"].(string)

	// 1) Fee (—è–≤–Ω–æ–µ)
	for i := range changes {
		if changes[i].Kind == KindFee && !used[i] {
			actions = append(actions, Action{
				Kind: ActFee,
				Sides: []Side{{
					Account:  changes[i].Account,
					Currency: "XRP",
					Issuer:   "XRP",
					Amount:   changes[i].Delta, // –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ
				}},
				Note: "Fee",
			})
			used[i] = true
		}
	}

	// 2) Burn (—è–≤–Ω–æ–µ)
	for i := range changes {
		if changes[i].Kind == KindBurn && !used[i] {
			actions = append(actions, Action{
				Kind: ActBurn,
				Sides: []Side{{
					Account:  changes[i].Account,
					Currency: changes[i].Currency,
					Issuer:   changes[i].Issuer,
					Amount:   changes[i].Delta, // –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ (—Ç–æ–∫–µ–Ω—ã —Å–∂–∏–≥–∞—é—Ç—Å—è)
				}},
				Note: "Burn",
			})
			used[i] = true
		}
	}

	// 3) Liquidity (—è–≤–Ω–æ–µ)
	for i := range changes {
		if changes[i].Kind == KindLiquidity && !used[i] {
			actions = append(actions, Action{
				Kind: ActLiquidity,
				Sides: []Side{{
					Account:  changes[i].Account,
					Currency: "XRP",
					Issuer:   "XRP",
					Amount:   changes[i].Delta,
				}},
				Note: "Liquidity",
			})
			used[i] = true
		}
	}

	// 4) –°–≤–∞–ø —É –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è (–µ—Å–ª–∏ –µ—Å—Ç—å -XRP –∏ +IOU/XRP)
	if txAccount != "" {
		acts := pairAccountActions(txAccount, changes, used, ActSwap)
		actions = append(actions, acts...)
	}

	// 5) DexOffer —É –æ—Å—Ç–∞–ª—å–Ω—ã—Ö (–∫–∞–∂–¥—ã–π –∞–∫–∫–∞—É–Ω—Ç, –∫—Ä–æ–º–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –∏ –ø–æ–ª—É—á–∞—Ç–µ–ª—è)
	byAcct := collectByAccount(changes, used)
	for acct := range byAcct {
		if acct == txAccount || acct == txDestination {
			continue
		}
		acts := pairAccountActions(acct, changes, used, ActDexOffer)
		actions = append(actions, acts...)
	}

	// 6) Transfer: —Å–≤—è–∑–∞—Ç—å txAccount(–æ—Å—Ç–∞–≤—à–∏–π—Å—è –º–∏–Ω—É—Å) -> txDestination(–ø–ª—é—Å delivered)
	delCur, delIss, delVal, _, hasDel := getDeliveredInfo(tx)

	var destPosIdx = -1
	if hasDel && txDestination != "" {
		// –∏—â–µ–º —É destination –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π change –ø–æ delivered (–ª—É—á—à–∏–π –º–∞—Ç—á –ø–æ –≤–∞–ª—é—Ç–µ/—ç–º–∏—Ç–µ–Ω—Ç—É/–≤–µ–ª–∏—á–∏–Ω–µ)
		bestDiff := decimal.NewFromFloat(1e18)
		for i := range changes {
			if used[i] {
				continue
			}
			c := changes[i]
			if c.Account != txDestination || sign(c.Delta) <= 0 {
				continue
			}
			if delCur == "XRP" && c.Currency == "XRP" {
				diff := c.Delta.Sub(delVal).Abs()
				if diff.LessThan(bestDiff) {
					bestDiff = diff
					destPosIdx = i
				}
			} else if c.Currency == delCur && c.Issuer == delIss {
				diff := c.Delta.Sub(delVal).Abs()
				if diff.LessThan(bestDiff) {
					bestDiff = diff
					destPosIdx = i
				}
			}
		}
	}

	var senderNegIdx = -1
	if txAccount != "" {
		// –±–µ—Ä—ë–º –∫—Ä—É–ø–Ω–µ–π—à–∏–π (–ø–æ –º–æ–¥—É–ª—é) –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π –æ—Å—Ç–∞—Ç–æ–∫ —É –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è (–ø–æ—Å–ª–µ —Å–≤–∞–ø–∞/—Ñ–∏–∏)
		best := decimal.Zero
		for i := range changes {
			if used[i] {
				continue
			}
			c := changes[i]
			if c.Account == txAccount && sign(c.Delta) < 0 && c.Delta.Abs().GreaterThan(best) {
				best = c.Delta.Abs()
				senderNegIdx = i
			}
		}
	}

	if senderNegIdx >= 0 && destPosIdx >= 0 {
		actions = append(actions, Action{
			Kind: ActTransfer,
			Sides: []Side{
				{
					Account:  changes[senderNegIdx].Account,
					Currency: changes[senderNegIdx].Currency,
					Issuer:   changes[senderNegIdx].Issuer,
					Amount:   changes[senderNegIdx].Delta, // -
				},
				{
					Account:  changes[destPosIdx].Account,
					Currency: changes[destPosIdx].Currency,
					Issuer:   changes[destPosIdx].Issuer,
					Amount:   changes[destPosIdx].Delta, // +
				},
			},
			Note: "Transfer (sender->destination, possibly cross-currency)",
		})
		used[senderNegIdx] = true
		used[destPosIdx] = true
		// –ø–æ–º–µ—Ç–∏–º Kind —É –∏–∑–º–µ–Ω–µ–Ω–∏–π
		changes[senderNegIdx].Kind = KindTransfer
		changes[destPosIdx].Kind = KindTransfer
	}

	// 6) –û—Å—Ç–∞—Ç–∫–∏ ‚Äî –∫–∞–∫ Unknown (—Ä–µ–¥–∫–∏–µ —Å–ª—É—á–∞–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä, —á–∞—Å—Ç–∏—á–Ω—ã–µ/–º—É–ª—å—Ç–∏-–ø–∞—Ä—ã)
	for i := range changes {
		if used[i] {
			continue
		}
		actions = append(actions, Action{
			Kind: ActLiquidity,
			Sides: []Side{{
				Account:  changes[i].Account,
				Currency: changes[i].Currency,
				Issuer:   changes[i].Issuer,
				Amount:   changes[i].Delta,
			}},
			Note: "Unpaired residue",
		})
	}

	return actions
}

// =========================
// Utils for printing
// =========================

func fmtAmt(s Side) string {
	unit := s.Currency
	if unit == "XRP" {
		unit = "XRP"
	} else {
		// –∫–æ—Ä–æ—Ç–∫–∞—è —Ñ–æ—Ä–º–∞ HEX –∫–æ–¥–∞: –ø–µ—Ä–≤—ã–µ 8 —Å–∏–º–≤–æ–ª–æ–≤ –∏ —ç–º–∏—Ç–µ–Ω—Ç –≤ –∫–æ—Ä–æ—Ç–∫–æ–π –Ω–æ—Ç–∞—Ü–∏–∏
		if len(unit) > 8 {
			unit = unit[:8] + "‚Ä¶"
		}
	}
	iss := s.Issuer
	if iss == "" {
		iss = "-"
	}
	sign := "+"
	if s.Amount.IsNegative() {
		sign = "-"
	}
	return fmt.Sprintf("%s %.6f %s.%s",
		sign, s.Amount.Abs().InexactFloat64(), unit, shortAddr(iss))
}

func shortAddr(a string) string {
	if a == "" || a == "XRP" {
		return a
	}
	if len(a) <= 6 {
		return a
	}
	return a[:3] + "‚Ä¶" + a[len(a)-3:]
}

// =========================
// Main
// =========================
func main() {
	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª—ã –æ—Ç tx_1.json –¥–æ tx_14.json
	for i := 23; i <= 23; i++ {
		filename := fmt.Sprintf("../examples/tx_%d.json", i)

		fmt.Printf("\n" + strings.Repeat("=", 80) + "\n")
		fmt.Printf("–û–ë–†–ê–ë–û–¢–ö–ê –§–ê–ô–õ–ê: %s\n", filename)
		fmt.Printf(strings.Repeat("=", 80) + "\n")

		data, err := os.ReadFile(filename)
		if err != nil {
			fmt.Printf("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ %s: %v\n", filename, err)
			continue
		}

		var tx map[string]interface{}
		if err := json.Unmarshal(data, &tx); err != nil {
			fmt.Printf("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON —Ñ–∞–π–ª–∞ %s: %v\n", filename, err)
			continue
		}

		// 1) –ü–ª–æ—Å–∫–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
		changes := ExtractBalanceChanges(tx)

		// 2) –°–≤—è–∑–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π (–ø–æ–º–µ—á–∞—é—Ç Kind —É changes –Ω–∞ Swap/DexOffer/Transfer/–∏ —Ç.–¥.)
		actions := BuildActionGroups(tx, changes)

		// 3) –ü–µ—á–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–π (—É–∂–µ —Å –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–º–∏ Kind)
		fmt.Println("=== –ò–∑–º–µ–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–æ–≤ ===")
		for j, c := range changes {
			sign := "+"
			if c.Delta.IsNegative() {
				sign = "-"
			}
			fmt.Printf("%2d. %-35s %6s %s %s%.6f   [%s]\n",
				j+1, c.Account, c.Currency, c.Issuer, sign, c.Delta.Abs().InexactFloat64(), c.Kind)
		}
		fmt.Printf("–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: %d\n", len(changes))

		// 4) –ü–µ—á–∞—Ç—å —Å–≤—è–∑–æ–∫ –¥–µ–π—Å—Ç–≤–∏–π
		fmt.Println("\n=== –°–≤—è–∑–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π ===")
		for j, a := range actions {
			var sb []string
			for _, s := range a.Sides {
				sb = append(sb, fmt.Sprintf("%s: %s", shortAddr(s.Account), fmtAmt(s)))
			}
			note := a.Note
			if note != "" {
				note = "  // " + note
			}
			fmt.Printf("%2d) %-9s  %s%s\n", j+1, a.Kind, strings.Join(sb, " | "), note)
		}
	}
}
